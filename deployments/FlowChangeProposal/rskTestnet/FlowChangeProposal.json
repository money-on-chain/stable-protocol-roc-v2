{
  "address": "0x77f8e99badfD4E60bC09c95c13787f011D5bB05A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMocCARC20",
          "name": "mocCoreProxy_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newMocQueueImpl_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeTokenPriceProvider_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feesSplitterProxy_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tCInterestPaymentBlockSpan_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settlementBlockSpan_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decayBlockSpan_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "emaCalculationBlockSpan_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "decayBlockSpan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emaCalculationBlockSpan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTokenPriceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesSplitterProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocCoreProxy",
      "outputs": [
        {
          "internalType": "contract IMocCARC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocQueueProxy",
      "outputs": [
        {
          "internalType": "contract IMocQueue",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newMocQueueImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementBlockSpan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tCInterestPaymentBlockSpan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf08c90d9bf0e1b05f4f029c79438a34223ea1d6bd0588e78f9deb31b40288205",
  "receipt": {
    "to": null,
    "from": "0xCD8A1c9aCc980ae031456573e34dC05cD7daE6e3",
    "contractAddress": "0x77f8e99badfD4E60bC09c95c13787f011D5bB05A",
    "transactionIndex": 0,
    "gasUsed": "485689",
    "logsBloom": "0x
    "blockHash": "0xf477a1b0336813a5cc11cfb27d324d34f5ebf57702c611e273bbdeb861cfe09c",
    "transactionHash": "0xf08c90d9bf0e1b05f4f029c79438a34223ea1d6bd0588e78f9deb31b40288205",
    "logs": [],
    "blockNumber": 5777242,
    "cumulativeGasUsed": "485689",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa416934264515bb381E3b746f10f22D5c6f9431a",
    "0xb07477dC7316B9514fC6BF76790AF4ED284DF7F2",
    "0x8DCE78BbD4D757EF7777Be113277cf5A35283b1E",
    "0x110872f2c859985B06F122a738d5b66052fCF1ff",
    "26292",
    "112680",
    "3756",
    "3756"
  ],
  "numDeployments": 1,
  "solcInputHash": "6a6797d3f46d888457ee874255c05158",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMocCARC20\",\"name\":\"mocCoreProxy_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMocQueueImpl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTokenPriceProvider_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feesSplitterProxy_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tCInterestPaymentBlockSpan_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementBlockSpan_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decayBlockSpan_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emaCalculationBlockSpan_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decayBlockSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emaCalculationBlockSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokenPriceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesSplitterProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocCoreProxy\",\"outputs\":[{\"internalType\":\"contract IMocCARC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocQueueProxy\",\"outputs\":[{\"internalType\":\"contract IMocQueue\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newMocQueueImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementBlockSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tCInterestPaymentBlockSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"decayBlockSpan_\":\"Flux capacitor decay block span\",\"emaCalculationBlockSpan_\":\"How many blocks should pass between EMA calculations\",\"feeTokenPriceProvider_\":\"new Fee Token price provider address\",\"feesSplitterProxy_\":\"new Commission splitter for both TCInterest & MoCFee collector\",\"mocCoreProxy_\":\"MocCore proxy contract\",\"newMocQueueImpl_\":\"new MocQueue implementation contract\",\"settlementBlockSpan_\":\"Number of blocks between settlements\",\"tCInterestPaymentBlockSpan_\":\"Amount of blocks to wait for next TC interest payment\"}},\"execute()\":{\"details\":\"Should be called by the governor, but this contract does not check that explicitly because it is not its responsibility in the current architecture IMPORTANT: This function should not be overridden, you should only redefine _beforeUpgrade and _afterUpgrade methods to use this template\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"constructor\"},\"execute()\":{\"notice\":\"Execute the changes.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/changers/FlowChangeProposal.sol\":\"FlowChangeProposal\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul[j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTOtfDnca[r]Iulc]jmul[jul]VcTOculjmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/changers/FlowChangeProposal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IChangerContract } from \\\"../interfaces/IChangerContract.sol\\\";\\n\\n/**\\n  In this changer we change:\\n\\n  1) Set Fee flow output to new commission splitter\\n  2) Set TCInterest output to new commission splitter\\n  3) New implementation of MoCQueue (fix bug)\\n  4) New feeTokenPriceProvider get the price from OKU swap\\n  5) Update amount of blocks to wait for next TC interest payment\\n  6) Update amount of blocks between settlements\\n  7) Update Flux capacitor decay block span\\n  8) Update how many blocks should pass between EMA calculations\\n */\\n\\ninterface IMocCARC20 {\\n    function setMocFeeFlowAddress(address mocFeeFlowAddress_) external;\\n\\n    function setTCInterestCollectorAddress(address tcInterestCollectorAddress_) external;\\n\\n    function setFeeTokenPriceProviderAddress(address mocFeeTokenPriceProviderAddress_) external;\\n\\n    function mocQueue() external view returns (address mocQueue_);\\n\\n    function setTCInterestPaymentBlockSpan(uint256 tcInterestPaymentBlockSpan_) external;\\n\\n    function setBes(uint256 bes_) external;\\n\\n    function setDecayBlockSpan(uint256 decayBlockSpan_) external;\\n\\n    function setEmaCalculationBlockSpan(uint256 blockSpan_) external;\\n}\\n\\ninterface IMocQueue {\\n     function upgradeTo(address newMocQueueImpl_) external;\\n}\\n\\n\\ncontract FlowChangeProposal is IChangerContract {\\n    // ------- Storage -------\\n\\n    // MocCore proxy contract\\n    IMocCARC20 public immutable mocCoreProxy;\\n    // MocQueue proxy contract\\n    IMocQueue public immutable mocQueueProxy;\\n    // new MocQueue implementation contract\\n    address public immutable newMocQueueImpl;\\n    // Fee Token price provider\\n    address public feeTokenPriceProvider;\\n    // New operations fees splitter for both TCInterest & MoCFee collector\\n    address public immutable feesSplitterProxy;\\n    // Amount of blocks to wait for next TC interest payment\\n    uint256 public tCInterestPaymentBlockSpan;\\n    // Number of blocks between settlements\\n    uint256 public settlementBlockSpan;\\n    // Flux capacitor decay block span\\n    uint256 public decayBlockSpan;\\n    // How many blocks should pass between EMA calculations\\n    uint256 public emaCalculationBlockSpan;\\n\\n    /**\\n     * @notice constructor\\n     * @param mocCoreProxy_ MocCore proxy contract\\n     * @param newMocQueueImpl_ new MocQueue implementation contract\\n     * @param feeTokenPriceProvider_ new Fee Token price provider address\\n     * @param feesSplitterProxy_ new Commission splitter for both TCInterest & MoCFee collector\\n     * @param tCInterestPaymentBlockSpan_ Amount of blocks to wait for next TC interest payment\\n     * @param settlementBlockSpan_ Number of blocks between settlements\\n     * @param decayBlockSpan_ Flux capacitor decay block span\\n     * @param emaCalculationBlockSpan_ How many blocks should pass between EMA calculations\\n     */\\n    constructor(\\n        IMocCARC20 mocCoreProxy_,\\n        address newMocQueueImpl_,\\n        address feeTokenPriceProvider_,\\n        address feesSplitterProxy_,\\n        uint256 tCInterestPaymentBlockSpan_,\\n        uint256 settlementBlockSpan_,\\n        uint256 decayBlockSpan_,\\n        uint256 emaCalculationBlockSpan_\\n    ) {\\n        mocCoreProxy = mocCoreProxy_;\\n        newMocQueueImpl = newMocQueueImpl_;\\n        feeTokenPriceProvider = feeTokenPriceProvider_;\\n        feesSplitterProxy = feesSplitterProxy_;\\n        tCInterestPaymentBlockSpan = tCInterestPaymentBlockSpan_;\\n        settlementBlockSpan = settlementBlockSpan_;\\n        decayBlockSpan = decayBlockSpan_;\\n        emaCalculationBlockSpan = emaCalculationBlockSpan_;\\n        mocQueueProxy = IMocQueue(mocCoreProxy.mocQueue());\\n    }\\n\\n    /**\\n      @notice Execute the changes.\\n      @dev Should be called by the governor, but this contract does not check that explicitly\\n      because it is not its responsibility in the current architecture\\n      IMPORTANT: This function should not be overridden, you should only redefine\\n      _beforeUpgrade and _afterUpgrade methods to use this template\\n    */\\n    function execute() external {\\n        _beforeUpgrade();\\n        _upgrade();\\n        _afterUpgrade();\\n    }\\n\\n    /**\\n      @notice Upgrade the proxy to the newImplementation\\n      @dev IMPORTANT: This function should not be overridden\\n    */\\n    function _upgrade() internal {\\n        mocQueueProxy.upgradeTo(newMocQueueImpl);\\n    }\\n\\n    /**\\n      @notice Intended to prepare the system for the upgrade\\n    */\\n    function _beforeUpgrade() internal view {}\\n\\n    /**\\n      @notice Intended to do the final tweaks after the upgrade, for example initialize the contract\\n    */\\n    function _afterUpgrade() internal {\\n        // update MocCore setups\\n        mocCoreProxy.setMocFeeFlowAddress(feesSplitterProxy);\\n        mocCoreProxy.setTCInterestCollectorAddress(feesSplitterProxy);\\n        mocCoreProxy.setFeeTokenPriceProviderAddress(feeTokenPriceProvider);\\n\\n        mocCoreProxy.setTCInterestPaymentBlockSpan(tCInterestPaymentBlockSpan);\\n        mocCoreProxy.setBes(settlementBlockSpan);\\n        mocCoreProxy.setDecayBlockSpan(decayBlockSpan);\\n        mocCoreProxy.setEmaCalculationBlockSpan(emaCalculationBlockSpan);\\n    }\\n\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x69adbfea866f281d5e76514f8cf0e4e955216f56e0afc6fe75d01bb378ce9fb9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IChangerContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n  @title IChangerContract\\n  @notice This interface is the one used by the governance system.\\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\\n  system is fully in place.\\n */\\ninterface IChangerContract {\\n    /**\\n    @notice Override this function with a recipe of the changes to be done when this ChangeContract\\n    is executed\\n   */\\n    function execute() external;\\n}\\n\",\"keccak256\":\"0x2f30103bbdefcd63e9a98e7462ec95c54df9455fa086e789af0a0f6483daae79\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x610100806040523461016c576101008161079680380380916100218285610171565b83398101031261016c5780516001600160a01b0391908281169081810361016c576004916020916100538386016101aa565b94610060604082016101aa565b9561006d606083016101aa565b60808301519060a08401519260e060c08601519501519560805260c052896000991660018060a01b03198a541617895560e0526001556002556003558355604051928380926313ed7ba560e01b82525afa918215610160578092610121575b50501660a0526040516105d790816101bf823960805181818161025801526104f7015260a0518181816101dc015261053a015260c051818181610150015261021b015260e05181818161010d015261028e0152f35b9091506020823d8211610158575b8161013c60209383610171565b81010312610155575061014e906101aa565b38806100cc565b80fd5b3d915061012f565b604051903d90823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761019457604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361016c5756fe608060408181526004918236101561001657600080fd5b600092833560e01c91826334b1869114610526575081633706181f146104e257816361461954146101c05781636f30471f146101a15781637a727fe81461017f57508063a97221611461013c578063b15a2014146100f9578063ccb14e26146100db578063f13f4054146100b45763ff728ef01461009357600080fd5b346100b057816003193601126100b0576020906001549051908152f35b5080fd5b50346100b057816003193601126100b057905490516001600160a01b039091168152602090f35b50346100b057816003193601126100b0576020906002549051908152f35b50346100b057816003193601126100b057517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346100b057816003193601126100b057517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90503461019d578260031936011261019d5760209250549051908152f35b8280fd5b5050346100b057816003193601126100b0576020906003549051908152f35b8383346100b057816003193601126100b0576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693909190843b156104de57838083518097631b2ce7f360e11b8252867f000000000000000000000000000000000000000000000000000000000000000016858301528160249485925af180156104d4576104bf575b849550837f00000000000000000000000000000000000000000000000000000000000000001693843b15610417578351630d6ac46360e01b81527f000000000000000000000000000000000000000000000000000000000000000082168482018190529087818581838b5af180156104b5579088916104a0575b5050853b1561049c5784519063039ae9cb60e51b82528482015286818481838a5af180156104925790879161047d575b505416843b1561041757835190630f1e5e2b60e01b8252838201528581838183895af1801561043457908691610468575b5050600154843b156104175783519063073763b960e01b8252838201528581838183895af1801561043457908691610453575b5050600254843b156104175783519063c84353c960e01b8252838201528581838183895af180156104345790869161043e575b5050600354843b15610417578351906373e28af960e01b8252838201528581838183895af180156104345790869161041b575b5050815490843b156104175785928385519687948593631de2560560e11b85528401525af190811561040e57506103fa5750f35b8161040491610569565b61040b5780f35b80fd5b513d84823e3d90fd5b8580fd5b8161042591610569565b6104305784876103c6565b8480fd5b84513d88823e3d90fd5b8161044891610569565b610430578487610393565b8161045d91610569565b610430578487610360565b8161047291610569565b61043057848761032d565b8161048791610569565b6104175785886102fc565b85513d89823e3d90fd5b8680fd5b816104aa91610569565b61049c5786896102cc565b86513d8a823e3d90fd5b939094816104cc91610569565b928490610252565b83513d87823e3d90fd5b8380fd5b5050346100b057816003193601126100b057517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b8490346100b057816003193601126100b0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff82111761058b57604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220df82098c4cce817f816e500a14b20ffa5ec8e0de0ef06124df9b67a9a8f990f664736f6c63430008140033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826334b1869114610526575081633706181f146104e257816361461954146101c05781636f30471f146101a15781637a727fe81461017f57508063a97221611461013c578063b15a2014146100f9578063ccb14e26146100db578063f13f4054146100b45763ff728ef01461009357600080fd5b346100b057816003193601126100b0576020906001549051908152f35b5080fd5b50346100b057816003193601126100b057905490516001600160a01b039091168152602090f35b50346100b057816003193601126100b0576020906002549051908152f35b50346100b057816003193601126100b057517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346100b057816003193601126100b057517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90503461019d578260031936011261019d5760209250549051908152f35b8280fd5b5050346100b057816003193601126100b0576020906003549051908152f35b8383346100b057816003193601126100b0576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693909190843b156104de57838083518097631b2ce7f360e11b8252867f000000000000000000000000000000000000000000000000000000000000000016858301528160249485925af180156104d4576104bf575b849550837f00000000000000000000000000000000000000000000000000000000000000001693843b15610417578351630d6ac46360e01b81527f000000000000000000000000000000000000000000000000000000000000000082168482018190529087818581838b5af180156104b5579088916104a0575b5050853b1561049c5784519063039ae9cb60e51b82528482015286818481838a5af180156104925790879161047d575b505416843b1561041757835190630f1e5e2b60e01b8252838201528581838183895af1801561043457908691610468575b5050600154843b156104175783519063073763b960e01b8252838201528581838183895af1801561043457908691610453575b5050600254843b156104175783519063c84353c960e01b8252838201528581838183895af180156104345790869161043e575b5050600354843b15610417578351906373e28af960e01b8252838201528581838183895af180156104345790869161041b575b5050815490843b156104175785928385519687948593631de2560560e11b85528401525af190811561040e57506103fa5750f35b8161040491610569565b61040b5780f35b80fd5b513d84823e3d90fd5b8580fd5b8161042591610569565b6104305784876103c6565b8480fd5b84513d88823e3d90fd5b8161044891610569565b610430578487610393565b8161045d91610569565b610430578487610360565b8161047291610569565b61043057848761032d565b8161048791610569565b6104175785886102fc565b85513d89823e3d90fd5b8680fd5b816104aa91610569565b61049c5786896102cc565b86513d8a823e3d90fd5b939094816104cc91610569565b928490610252565b83513d87823e3d90fd5b8380fd5b5050346100b057816003193601126100b057517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b8490346100b057816003193601126100b0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff82111761058b57604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220df82098c4cce817f816e500a14b20ffa5ec8e0de0ef06124df9b67a9a8f990f664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "decayBlockSpan_": "Flux capacitor decay block span",
          "emaCalculationBlockSpan_": "How many blocks should pass between EMA calculations",
          "feeTokenPriceProvider_": "new Fee Token price provider address",
          "feesSplitterProxy_": "new Commission splitter for both TCInterest & MoCFee collector",
          "mocCoreProxy_": "MocCore proxy contract",
          "newMocQueueImpl_": "new MocQueue implementation contract",
          "settlementBlockSpan_": "Number of blocks between settlements",
          "tCInterestPaymentBlockSpan_": "Amount of blocks to wait for next TC interest payment"
        }
      },
      "execute()": {
        "details": "Should be called by the governor, but this contract does not check that explicitly because it is not its responsibility in the current architecture IMPORTANT: This function should not be overridden, you should only redefine _beforeUpgrade and _afterUpgrade methods to use this template"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "constructor"
      },
      "execute()": {
        "notice": "Execute the changes."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7595,
        "contract": "contracts/changers/FlowChangeProposal.sol:FlowChangeProposal",
        "label": "feeTokenPriceProvider",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7599,
        "contract": "contracts/changers/FlowChangeProposal.sol:FlowChangeProposal",
        "label": "tCInterestPaymentBlockSpan",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7601,
        "contract": "contracts/changers/FlowChangeProposal.sol:FlowChangeProposal",
        "label": "settlementBlockSpan",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7603,
        "contract": "contracts/changers/FlowChangeProposal.sol:FlowChangeProposal",
        "label": "decayBlockSpan",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7605,
        "contract": "contracts/changers/FlowChangeProposal.sol:FlowChangeProposal",
        "label": "emaCalculationBlockSpan",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}