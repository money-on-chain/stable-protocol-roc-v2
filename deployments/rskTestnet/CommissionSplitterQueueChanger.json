{
  "address": "0xeFAA7580FC58b44F92839d2aFc9d010c67C0Bc0e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMocCARC20",
          "name": "mocCoreProxy_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newMocQueueImpl_",
          "type": "address"
        },
        {
          "internalType": "contract IDataProvider",
          "name": "feeTokenPriceProvider_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feesSplitterProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTokenPriceProvider",
      "outputs": [
        {
          "internalType": "contract IDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesSplitterProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocCoreProxy",
      "outputs": [
        {
          "internalType": "contract IMocCARC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocQueueProxy",
      "outputs": [
        {
          "internalType": "contract IMocQueue",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newMocQueueImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f6fb112a2aed23246418027d97ca634dc53c1b2018da3a6a28339586a5e0f62",
  "receipt": {
    "to": null,
    "from": "0xCD8A1c9aCc980ae031456573e34dC05cD7daE6e3",
    "contractAddress": "0xeFAA7580FC58b44F92839d2aFc9d010c67C0Bc0e",
    "transactionIndex": 0,
    "gasUsed": "303403",
    "logsBloom": "0x
    "blockHash": "0x83f131b829ed319f9a824725ccc18307b61ae159c39f45d3db9b0ef0a60c1ab4",
    "transactionHash": "0x5f6fb112a2aed23246418027d97ca634dc53c1b2018da3a6a28339586a5e0f62",
    "logs": [],
    "blockNumber": 5725489,
    "cumulativeGasUsed": "303403",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa416934264515bb381E3b746f10f22D5c6f9431a",
    "0x3463C8a5Ec7237ed875A3a27434E07074A77BCFb",
    "0x8DCE78BbD4D757EF7777Be113277cf5A35283b1E",
    "0x1CE7F180A57b9B8B25EDf97cF5979C432e15FCf6"
  ],
  "numDeployments": 1,
  "solcInputHash": "2355f2acf5f069819f5a331e14fc0e75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMocCARC20\",\"name\":\"mocCoreProxy_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMocQueueImpl_\",\"type\":\"address\"},{\"internalType\":\"contract IDataProvider\",\"name\":\"feeTokenPriceProvider_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feesSplitterProxy_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokenPriceProvider\",\"outputs\":[{\"internalType\":\"contract IDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesSplitterProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocCoreProxy\",\"outputs\":[{\"internalType\":\"contract IMocCARC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocQueueProxy\",\"outputs\":[{\"internalType\":\"contract IMocQueue\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newMocQueueImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"feeTokenPriceProvider_\":\"new Fee Token price provider address\",\"feesSplitterProxy_\":\"new Commission splitter for both TCInterest & MoCFee collector\",\"mocCoreProxy_\":\"MocCore proxy contract\",\"newMocQueueImpl_\":\"new MocQueue implementation contract\"}},\"execute()\":{\"details\":\"Should be called by the governor, but this contract does not check that explicitly because it is not its responsibility in the current architecture IMPORTANT: This function should not be overridden, you should only redefine _beforeUpgrade and _afterUpgrade methods to use this template\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"constructor\"},\"execute()\":{\"notice\":\"Execute the changes.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/changers/CommissionSplitterQueueChanger.sol\":\"CommissionSplitterQueueChanger\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul[j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTOtfDnca[r]Iulc]jmul[jul]VcTOculjmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/changers/CommissionSplitterQueueChanger.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IChangerContract } from \\\"../interfaces/IChangerContract.sol\\\";\\nimport { IDataProvider } from \\\"../interfaces/IDataProvider.sol\\\";\\n//import { MocCARC20 } from \\\"moc-main/contracts/collateral/rc20/MocCARC20.sol\\\";\\n//import { MocQueue } from \\\"moc-main/contracts/queue/MocQueue.sol\\\";\\n//import { CommissionSplitter } from \\\"moc-main/contracts/auxiliary/CommissionSplitter.sol\\\";\\n\\n/**\\n  In this changer we change:\\n\\n  1) Set Fee flow output to new commission splitter\\n  2) Set TCInterest output to new commission splitter\\n  3) New implementation of MoCQueue (fix bug)\\n  4) New feeTokenPriceProvider get the price from OKU swap\\n */\\n\\ninterface IMocCARC20 {\\n    function setMocFeeFlowAddress(address mocFeeFlowAddress_) external;\\n\\n    function setTCInterestCollectorAddress(address tcInterestCollectorAddress_) external;\\n\\n    function setFeeTokenPriceProviderAddress(address mocFeeTokenPriceProviderAddress_) external;\\n\\n    function mocQueue() external view returns (address mocQueue_);\\n}\\n\\ninterface IMocQueue {\\n     function upgradeTo(address newMocQueueImpl_) external;\\n}\\n\\n\\ncontract CommissionSplitterQueueChanger is IChangerContract {\\n    // ------- Storage -------\\n\\n    // MocCore proxy contract\\n    IMocCARC20 public immutable mocCoreProxy;\\n    // MocQueue proxy contract\\n    IMocQueue public immutable mocQueueProxy;\\n    // new MocQueue implementation contract\\n    address public immutable newMocQueueImpl;\\n    // Fee Token price provider\\n    IDataProvider public feeTokenPriceProvider;\\n    // new operations fees splitter for both TCInterest & MoCFee collector\\n    address public immutable feesSplitterProxy;\\n\\n    /**\\n     * @notice constructor\\n     * @param mocCoreProxy_ MocCore proxy contract\\n     * @param newMocQueueImpl_ new MocQueue implementation contract\\n     * @param feeTokenPriceProvider_ new Fee Token price provider address\\n     * @param feesSplitterProxy_ new Commission splitter for both TCInterest & MoCFee collector\\n     */\\n    constructor(\\n        IMocCARC20 mocCoreProxy_,\\n        address newMocQueueImpl_,\\n        IDataProvider feeTokenPriceProvider_,\\n        address feesSplitterProxy_\\n    ) {\\n        mocCoreProxy = mocCoreProxy_;\\n        newMocQueueImpl = newMocQueueImpl_;\\n        feeTokenPriceProvider = feeTokenPriceProvider_;\\n        feesSplitterProxy = feesSplitterProxy_;\\n        mocQueueProxy = IMocQueue(mocCoreProxy.mocQueue());\\n    }\\n\\n    /**\\n      @notice Execute the changes.\\n      @dev Should be called by the governor, but this contract does not check that explicitly\\n      because it is not its responsibility in the current architecture\\n      IMPORTANT: This function should not be overridden, you should only redefine\\n      _beforeUpgrade and _afterUpgrade methods to use this template\\n    */\\n    function execute() external {\\n        _beforeUpgrade();\\n        _upgrade();\\n        _afterUpgrade();\\n    }\\n\\n    /**\\n      @notice Upgrade the proxy to the newImplementation\\n      @dev IMPORTANT: This function should not be overridden\\n    */\\n    function _upgrade() internal {\\n        mocQueueProxy.upgradeTo(newMocQueueImpl);\\n    }\\n\\n    /**\\n      @notice Intended to prepare the system for the upgrade\\n    */\\n    function _beforeUpgrade() internal view {}\\n\\n    /**\\n      @notice Intended to do the final tweaks after the upgrade, for example initialize the contract\\n    */\\n    function _afterUpgrade() internal {\\n        // update MocCore setups\\n        mocCoreProxy.setMocFeeFlowAddress(feesSplitterProxy);\\n        mocCoreProxy.setTCInterestCollectorAddress(feesSplitterProxy);\\n        mocCoreProxy.setFeeTokenPriceProviderAddress(address(feeTokenPriceProvider));\\n    }\\n\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x273072599239f2aa5798bda71f52aceb5922f5b3ec922c59393d76a3f2b1eec4\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IChangerContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n  @title IChangerContract\\n  @notice This interface is the one used by the governance system.\\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\\n  system is fully in place.\\n */\\ninterface IChangerContract {\\n    /**\\n    @notice Override this function with a recipe of the changes to be done when this ChangeContract\\n    is executed\\n   */\\n    function execute() external;\\n}\\n\",\"keccak256\":\"0x2f30103bbdefcd63e9a98e7462ec95c54df9455fa086e789af0a0f6483daae79\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n * @title IDataProvider\\n * @notice Generic interface, to query for any bytes32 sized data from an external provider\\n */\\ninterface IDataProvider {\\n    /**\\n     * @notice returns the given `data` if `valid`\\n     * @param data peeked\\n     * @param valid true if the data is valid\\n     */\\n    function peek() external view returns (bytes32 data, bool valid);\\n}\\n\",\"keccak256\":\"0x3de99cb7b07e7ce3609104720e81ffe53d267bed20af0e65af39ee0f4390f514\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x610100806040523461014d576080816105a380380380916100208285610152565b83398101031261014d5780516001600160a01b03918282169081830361014d5761004c6020820161018b565b9160408201519385851680950361014d5760049361006e60606020950161018b565b60809290925260c052600080546001600160a01b031916909517855560e0526040516313ed7ba560e01b815292839182905afa918215610141578092610102575b50501660a05260405161040390816101a082396080518181816101aa0152610323015260a0518181816101330152610366015260c05181818160e70152610172015260e05181818160a401526101e00152f35b9091506020823d8211610139575b8161011d60209383610152565b81010312610136575061012f9061018b565b38806100af565b80fd5b3d9150610110565b604051903d90823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761017557604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361014d5756fe60806040818152600436101561001457600080fd5b600091823560e01c90816334b1869114610352575080633706181f1461030f57828163614619541461011657508063a9722161146100d3578063b15a2014146100905763f13f40541461006657600080fd5b3461008c578160031936011261008c57905490516001600160a01b039091168152602090f35b5080fd5b503461008c578160031936011261008c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461008c578160031936011261008c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b80833461030c578160031936011261030c576001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216803b156102a65783906024835180978193631b2ce7f360e11b8352877f00000000000000000000000000000000000000000000000000000000000000001660048401525af18015610302576102ed575b829350817f00000000000000000000000000000000000000000000000000000000000000001691823b156102a6578151630d6ac46360e01b81527f000000000000000000000000000000000000000000000000000000000000000082166004820181905290858160248183895af180156102e3579086916102ce575b5050833b156102ca5782519063039ae9cb60e51b82526004820152848160248183885af180156102c0579085916102ab575b505416823b156102a65783926024849284519586938492630f1e5e2b60e01b845260048401525af190811561029d57506102895750f35b8161029391610395565b61029a5780f35b80fd5b513d84823e3d90fd5b505050fd5b816102b591610395565b6102a6578386610252565b83513d87823e3d90fd5b8480fd5b816102d891610395565b6102ca578487610220565b84513d88823e3d90fd5b919092816102fa91610395565b9082906101a4565b81513d85823e3d90fd5b50fd5b503461008c578160031936011261008c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b83903461008c578160031936011261008c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff8211176103b757604052565b634e487b7160e01b600052604160045260246000fdfea264697066735822122076abae46c6efd4d8b336e4f478c3ff1fbcd4b587a75f4f59432ddd398a333dc364736f6c63430008140033",
  "deployedBytecode": "0x60806040818152600436101561001457600080fd5b600091823560e01c90816334b1869114610352575080633706181f1461030f57828163614619541461011657508063a9722161146100d3578063b15a2014146100905763f13f40541461006657600080fd5b3461008c578160031936011261008c57905490516001600160a01b039091168152602090f35b5080fd5b503461008c578160031936011261008c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461008c578160031936011261008c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b80833461030c578160031936011261030c576001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216803b156102a65783906024835180978193631b2ce7f360e11b8352877f00000000000000000000000000000000000000000000000000000000000000001660048401525af18015610302576102ed575b829350817f00000000000000000000000000000000000000000000000000000000000000001691823b156102a6578151630d6ac46360e01b81527f000000000000000000000000000000000000000000000000000000000000000082166004820181905290858160248183895af180156102e3579086916102ce575b5050833b156102ca5782519063039ae9cb60e51b82526004820152848160248183885af180156102c0579085916102ab575b505416823b156102a65783926024849284519586938492630f1e5e2b60e01b845260048401525af190811561029d57506102895750f35b8161029391610395565b61029a5780f35b80fd5b513d84823e3d90fd5b505050fd5b816102b591610395565b6102a6578386610252565b83513d87823e3d90fd5b8480fd5b816102d891610395565b6102ca578487610220565b84513d88823e3d90fd5b919092816102fa91610395565b9082906101a4565b81513d85823e3d90fd5b50fd5b503461008c578160031936011261008c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b83903461008c578160031936011261008c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff8211176103b757604052565b634e487b7160e01b600052604160045260246000fdfea264697066735822122076abae46c6efd4d8b336e4f478c3ff1fbcd4b587a75f4f59432ddd398a333dc364736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "feeTokenPriceProvider_": "new Fee Token price provider address",
          "feesSplitterProxy_": "new Commission splitter for both TCInterest & MoCFee collector",
          "mocCoreProxy_": "MocCore proxy contract",
          "newMocQueueImpl_": "new MocQueue implementation contract"
        }
      },
      "execute()": {
        "details": "Should be called by the governor, but this contract does not check that explicitly because it is not its responsibility in the current architecture IMPORTANT: This function should not be overridden, you should only redefine _beforeUpgrade and _afterUpgrade methods to use this template"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "constructor"
      },
      "execute()": {
        "notice": "Execute the changes."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7578,
        "contract": "contracts/changers/CommissionSplitterQueueChanger.sol:CommissionSplitterQueueChanger",
        "label": "feeTokenPriceProvider",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IDataProvider)7696"
      }
    ],
    "types": {
      "t_contract(IDataProvider)7696": {
        "encoding": "inplace",
        "label": "contract IDataProvider",
        "numberOfBytes": "20"
      }
    }
  }
}